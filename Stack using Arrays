#include <iostream>

using namespace std;

class Stack {
private:
    int *arr;  // Dynamic array
    int top;   // Top of stack
    int size;  // Stack size

public:
    Stack(int s) {  // Constructor to initialize stack with user-defined size
        size = s;
        arr = new int[size];
        top = -1;
    }

    ~Stack() {  // Destructor to free memory
        delete[] arr;
    }

    void push(int value) {
        if (top == size - 1) {
            cout << "Stack Overflow! Cannot push " << value << endl;
            return;
        }
        arr[++top] = value;
        cout << "Value pushed!" << endl;
    }

    void pop() {
        if (top == -1) {
            cout << "Stack Underflow! No elements to pop." << endl;
            return;
        }
        cout << "Popped value: " << arr[top--] << endl;
    }

    void peek() {
        if (top == -1) {
            cout << "Stack is empty!" << endl;
            return;
        }
        cout << "Top value: " << arr[top] << endl;
    }

    bool isEmpty() {
        return top == -1;
    }
};

int main() {
    int stackSize;
    cout << "Enter the size of the stack: ";
    cin >> stackSize;

    Stack s(stackSize); // Creating stack with user-defined size
    int choice, value;

    do {
        cout << "\n1. Push\n2. Pop\n3. Peek\n4. Check if Empty\n5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                s.push(value);
                break;
            case 2:
                s.pop();
                break;
            case 3:
                s.peek();
                break;
            case 4:
                cout << (s.isEmpty() ? "Stack is empty!" : "Stack is not empty!") << endl;
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 5);

    return 0;
}
